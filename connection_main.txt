package com.example.connectiontest

import kotlinx.coroutines.CompletableDeferred
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.TextView
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.BufferedReader
import java.io.InputStreamReader
import java.io.PrintWriter
import java.net.Socket

class MainActivity : AppCompatActivity() {
    private lateinit var socket: Socket
    private lateinit var brInput: BufferedReader
    private lateinit var brOutput: PrintWriter
    private val connectionReady = CompletableDeferred<Unit>()

    // ignore
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(R.layout.activity_main)
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        // made a button
        val btnConnect = findViewById<Button>(R.id.connect_button)
        btnConnect.setOnClickListener{
                connect()
                readMessagesInBackground()
        }






    }

    fun connect(){
        Log.d("Connection att", "172.24.28.216 && 9001") // check ip with ipconfig
        CoroutineScope(Dispatchers.Main).launch { // probably need to add this to your dependencies
            val txtFromServer = withContext(Dispatchers.IO) {
                socket = Socket("172.24.28.216", 9001)
                brInput = BufferedReader(InputStreamReader(socket.getInputStream()))
                brOutput = PrintWriter(socket.getOutputStream())

                brOutput.write("hello from app\n")
                brOutput.flush()
                brInput.readLine()
            }
            connectionReady.complete(Unit)
            Log.d("sent msg", txtFromServer)
            val textMsg = findViewById<TextView>(R.id.txtHello)
            textMsg.text = txtFromServer
        }


    }
    fun readMessagesInBackground() {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                // Wait for the connection to be ready
                connectionReady.await()

                while (true) {
                    val msg = brInput?.readLine() ?: break // break if connection is closed
                    Log.d("Server Message", msg)
                    withContext(Dispatchers.Main) {
                        findViewById<TextView>(R.id.txtMsg).text = msg
                    }
                }
            } catch (e: Exception) {
                Log.e("Read Error", e.message ?: "Unknown error")
            }
        }
    }


}
